name: Create Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: 'read'

env:
  APP_NAME: "portal"
  TAG: "v0.0.1"

jobs:

  build-releases:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [windows, linux, macos]
        arch: [amd64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch Tags
        run: git fetch --force --tags
          
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.20.1'
          cache: true
          
      - name: Setup Nodejs v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Wails with dependencies
        run: |
            sudo apt-get update -yq && \
            sudo apt-get install -yq nsis pkg-config libwebkit2gtk-4.0-37 libwebkit2gtk-4.0-dev libgtk-3-dev software-properties-common build-essential wget && \
            go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build binaries
        if: matrix.os != 'windows'
        run: |
          env GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} wails build
          #mv .${GITHUB_WORKSPACE}/build/${{ matrix.os }}/${{ matrix.arch }}/${{ env.APP_NAME }} ./build/${{ matrix.os }}/${{ matrix.arch }}/${{ env.APP_NAME }}-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create nsis installer
        if: matrix.os == 'windows-latest'
        run: | 
          #env GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_CXXFLAGS="-IC:\msys64\mingw64\include" wails build -nsis -ldflags '-extldflags "-static"' -skipbindings
          env GOOS="windows" GOARCH="amd64" wails build -nsis 
          
      - name: Create Release
        uses: goreleaser/goreleaser-action@v4
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro':
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
