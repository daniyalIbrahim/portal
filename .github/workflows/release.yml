name: Create Release

on:
  #push:
  #  branches: [ master ]
  workflow_dispatch:

permissions:
  contents: 'read'

env:
  APP_NAME: "portal"
  TAG: "v0.0.1"

jobs:

  build-releases:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, linux]
        arch: [amd64, arm64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch Tags
        run: git fetch --force --tags

      - name: Setup paths and env 
        run: |
          mkdir -p $HOME/.local/bin
          mkdir -p $HOME/.local/lib/pkgconfig
          echo "PKG_CONFIG_PATH=$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$HOME/.local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
          
      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.20.1'
          cache: true

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build binaries for ${{ env.APP_NAME }}
        run: |
          env GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} wails build
          mv ./build/${{ matrix.os }}/${{ matrix.arch }}/${{ env.APP_NAME }} ./build/${{ matrix.os }}/${{ matrix.arch }}/${{ env.APP_NAME }}-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create nsis installer
        run: |
          sudo apt-get install nsis -yq && \
          env GOOS="windows" GOARCH="amd64" wails build -nsis 

      - name: Create Release using GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: ${{ github.ref }}
          body: Release ${{ github.ref }}
          draft: false
          name: Release ${{ github.ref }}
          args: release --clean
          config: .goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ env.TAG }}
      #     release_name: Release ${{ env.TAG }}
      #     body: |
      #       This is the release notes for version ${{ env.TAG }}
      #     draft: true
      #     #prerelease: false
